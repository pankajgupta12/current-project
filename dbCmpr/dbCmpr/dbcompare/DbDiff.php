<?php

/**
 * Compare the schemas of between databases.
 *
 * For two database schemas to be considered the same, they must have the same
 * tables, where each table has the same fields, and each field has the same
 * parameters.
 *
 * Field parameters that are compared are those that are given by the MySQL
 * 'SHOW COLUMNS' command. These are: the field's name, it's type, whether the
 * field can store null values, whether the column is indexed, the default
 * values and whether the field was created with the 'auto_increment' keyword.
 */



class DbDiff
{

    private static $instance;
   
	public $schemaBeta = '';
	public $schemaLive = '';

	//schema set
    public $beta = '';
    public $live = '';

	//dbName set
	public $dbLive = '';
	
	//alter query set
	public $alterQueryForLive = '';
	public $typeSchLive = '';
	
	//set global inc for increament
	public $inc = -1;
	
	//set no. of tables with data
	public $tableDataList = array();
	
	//set global inc for increament
	public $tableInc = -1;
	
    /**
     * Export the schema of the database into an array.
     *
     * @param string $config Config details for the database connection.
     * @param string $name Name or description of the database.
     * @return mixed|string An array structure of the exported schema, or an error string.
     */

    public function getMySqlInfo($config, $name)
    {
        return $this->getMysqlVersion($config, $name);
    }

    private function getMysqlVersion($config, $name)
    {

        $db = mysqli_connect($config['host'], $config['user'], $config['password']) or die ("could not connect to mysql");

        if (!$db) {
            return null;
        }

        echo $config['name']; exit;

        mysqli_select_db($db, $config['name']) or die ("could not connect to mysql");

        if (!mysqli_select_db($db, $config['name'])) {
            return null;
        }

        echo "<pre>";
        echo mysqli_get_host_info();
        exit;

        $info['host'] = "MySQL host info: " . mysqli_get_host_info();
        $info['client'] = "MySQL client info: " . mysqli_get_client_info();
        $info['server'] = "MySQL server version:" . mysqli_get_server_info();

        mysqli_close($db);

    return $info;    
    }

    /**
     * Export the schema of the database into an array.
     *
     * @param string $config Config details for the database connection.
     * @param string $name Name or description of the database.
     * @return mixed|string An array structure of the exported schema, or an error string.
     */
    public static function export($config, $name)
    {

        $db = mysqli_connect($config['host'], $config['user'], $config['password']);

        if (!$db) {
            return null;
        }

        if (!mysqli_select_db($db, $config['name'])) {
            return null;
        }

        $result = mysqli_query($db, "SHOW TABLES");
        while ($row = mysqli_fetch_row($result)) {
            $tables[$row[0]] = array();
        }

        foreach ($tables as $table_name => $fields) {

            $result = mysqli_query($db, "SHOW COLUMNS FROM `" . $table_name . "`");
            while ($row = mysqli_fetch_assoc($result)) {
                $tables[$table_name][$row['Field']] = $row;
            }
        }
		
        mysqli_close($db);

        $data = array(
            'name' => $name,
            'time' => time(),
            'tables' => $tables
        );

        return $data;
    }
	
	/**
     * Compare two schemas (as generated by the 'export' method.)
     *
     * @param string $schema1 The first database schema.
     * @param string $schema2 The second database schema.
     * @return array The results of the comparison.
     */
	 public function chkSchema( $schema1 = null , $schema2 = null )
	 {
		//get keys of table name
		$tables1 = array_keys($schema1['tables']);
		$tables2 = array_keys($schema2['tables']);		
		
		//bool set
		$flagSet = false;
		
		//check and throw exception
		if( count( $tables1 ) < count( $tables2 ) )
		{
			$flagSet = true;
		}
		
	 return $flagSet;	
	 }
	 
	 /**
     * Compare two schemas (as generated by the 'export' method.)
     *
     * @param string $schema1 The first database schema.
     * @param string $schema2 The second database schema.
     * @return array The results of the comparison.
     */
	 public function chkSchemaTableField( $schema1 = null , $schema2 = null )
	 {
		
		//bool set
		$flagSet = false;		
		
		foreach ($schema1['tables'] as $table_name => $tblName)
		{
		
			/* echo "<pre>";
				echo $table_name;
				print_r(array_keys($tblName));
				print_r(array_keys($schema2['tables'][$table_name]));
			exit; */
			
			if( isset( $schema2['tables'][$table_name] ) )
			{
				
				// Check fields exist in both tables
				$schema1Field = array_keys($tblName);			
				$schema2Field = array_keys($schema2['tables'][$table_name]);
				
				/* echo count( $schema1Field ).count( $schema2Field );
				 die; */
				//check and throw exception
				 if( count( $schema1Field ) < count( $schema2Field ) )
				{
					/* echo $table_name;
					 echo "<pre>";
					print_r( $schema1Field );
					echo "<pre>";
					print_r( $schema2Field ); */
					$x = 1;
					echo "<h4> Table : ".$table_name."</h4>";
					foreach($schema2Field as $key => $value){
						
						if(!in_array($value,$schema1Field)){
							
							echo '('.$x.')   '.$value."<br>";
							$flagSet = true;
							$x++;
						}
						
					}
					
					$flagSet = true;
				} 
			}				
        }
		//die;
		
	  return $flagSet;	
	 }
	 
	 

    /**
     * Compare two schemas (as generated by the 'export' method.)
     *
     * @param string $schema1 The first database schema.
     * @param string $schema2 The second database schema.
     * @return array The results of the comparison.
     */
    public static function compare($schema1 = null, $schema2 = null , $config = null)
    {
		
        //load both schema and will use later into ajax
        $schObj = new DbDiff();
        $schObj->setSchema( $schema1, $schema2 );
		
		//set dbName
		$schObj->setLiveDb( $schema2['name'] );
		
		//set inc default at first time
		$schObj->setInc( $schObj->inc );
		
		//set tableInc for table data list which have or not
		$schObj->setTableInc( $schObj->tableInc );
		
		//set db details
		$schObj->setdbdetails( $config );
		
        $tables1 = array_keys($schema1['tables']);
        $tables2 = array_keys($schema2['tables']);
		
		//check schema keys form beta to live
		if( $schObj->chkSchema( $schema1, $schema2 ) == true )
		{
			$data['message'] = 'error';
			$data['type'] = 'schema mis-match error.';
		return json_encode( array( 'data' => $data ) );
		}
		
		//check schema table field keys form beta to live
		if( $schObj->chkSchemaTableField( $schema1, $schema2 ) == true )
		{
			$data['message'] = 'error';
			$data['type'] = 'schema column mis-match error.';
		return json_encode( array( 'data' => $data ) );
		}
		
        $tables = array_unique(array_merge($tables1, $tables2));
        $results = array();

        foreach ($tables as $table_name) {

            if (!isset($schema2['tables'][$table_name])) {
			
				$results[$table_name]['table'] = $table_name . '<>' . $schema2['name'] . '##' . $schema1['name'];		
                $results[$table_name]['db'] = $schema2['name'];       

                continue;
            }

            // Check fields exist in both tables
            $fields = array_merge($schema1['tables'][$table_name], $schema2['tables'][$table_name]);
			
            foreach ($fields as $field_name => $field) {
			
                if (!isset($schema2['tables'][$table_name][$field_name])) {

					$field['table_name'] = $table_name;		
					$field['database_name'] = $schema2['name'];					
					$results[$table_name]['field'][] = $field;		

                    continue;
                }
				
				
                // Check that the specific parameters of the fields match
                //$s1_params = $schema1['tables'][$table_name][$field_name];
                $s2_params = $schema2['tables'][$table_name][$field_name];

            }
        }
		
		//now analysing start
		foreach( $results as $tableName => $keyValue )
		{
			
			foreach( $keyValue as $ind => $val )
			{
				
				if( is_array( $val ) )
				{
				
					foreach( $val as $valIndex => $valValue )
					{				
						
						if( $ind == 'field' )
						{
							$setTypes = new stdClass();
							$setTypes->dataSetter = (object) $valValue;
							$setTypes->type = 'field';
							
							$objClass = new DbDiff();			

							$returnDetail = $objClass->getCreateFullSqlStatement( $setTypes , $objClass , $schObj , 'ADD' );		
							
							if( !empty($returnDetail) ) :
								$objClass->setAlterStmt( $returnDetail , $tableName , 'NEW FIELD' , 'ADD' );
								
								//set alter modify and add
								$schObj->setalterQueryForLive( $returnDetail , $schObj , 'NEW FIELD' );
								
							endif;
							
							$returnDetail = '';
							
							unset($setTypes);
							unset($objClass);
							
						}
					}						
				}
				else
				{
					if( $ind == 'table' )
					{
						//get create sql for put into in other database						
						$setTypes = new stdClass();
						$setTypes->dataSetter = $val;
						$setTypes->type = 'table';
						
						$objClass = new DbDiff();					
						$stmt2 = $objClass->getCreateFullSqlStatement( $setTypes , $objClass , $schObj );
						
                        /*                            
                            need to get only those tanle which are checked                            
                        */    
                    	$stmt1 = $objClass->getCheckedTableName( $_POST , $_GET , $tableName );	
						
						if( !empty($stmt2) ) :
							
							//set table structure
							$objClass->createTableFile( $stmt2 , $tableName );
							
						endif;
                                  
						unset($setTypes);
						unset($objClass);
						
					}
				}
			}			
		}

		// field match scenario
        $innerObj = new DbDiff();
        $innerObj->callFieldMatcher( $schema1, $schema2 , $schObj );
        unset( $innerObj );

        $objClass = new DbDiff();
        $objClass->exportDB($results , $schObj);
		
		if( count($results) > 0 )
		{
			return json_encode( array( 'data' => $results ) );
		}
		
    return $results;
    }

	/*
    *   version 1.0
    *   @params, POST , GET , 
    *
    *
    */
    private function createTableFile( $stmt = null , $tableName = null  )
	{
		
		$this->putContent( "inc/".$tableName.".inc", "");                            
		$this->putContent( "inc/".$tableName.".inc", "--"  . PHP_EOL ,FILE_APPEND );           
		$this->putContent( "inc/".$tableName.".inc", "--"  . PHP_EOL ,FILE_APPEND);           
		$this->putContent( "inc/".$tableName.".inc", "--"  . PHP_EOL ,FILE_APPEND);           
		$this->putContent( "inc/".$tableName.".inc", "-- ------TABLE STRUCTURE FOR `{$tableName}`"  . PHP_EOL ,FILE_APPEND);           
		$this->putContent( "inc/".$tableName.".inc", "{$stmt};"  . PHP_EOL ,FILE_APPEND);			
		$this->putContent( "inc/".$tableName.".inc", "  "  . PHP_EOL ,FILE_APPEND);           
		$this->putContent( "inc/".$tableName.".inc", "  "  . PHP_EOL ,FILE_APPEND); 	
		
	}
	
	/*
    *   version 1.0
    *   @params, POST , GET , 
    *
    *
    */
    private function createTableDataImportFile( $liveDbName = null , $tableName = null , $rowsObject = null , $objectKeys = null )
	{
		
		//set as object
		$objectKeys = (object)$objectKeys;
		
		$insertSql = '';
		$dataSql = '';
		//insertion start
		$insertSql .= "INSERT INTO `{$liveDbName}`.`{$tableName}` ";
		$dataSql .= "(";
		$k = 0;foreach( $rowsObject as $key => $value )
		{
			$value =  str_replace("'", "\'", $value);
			//$value =  stripslashes($value1);
			if( $k == 0 )
			{
				//$insertSql .= " {$key} ";
				$dataSql .= "'". $value ."'";
			}
			else
			{
				//$insertSql .= " , {$key} ";
				$dataSql .= " , '". $value ."'";
			}
		$k++;
		}
		
		//$insertSql .= " )";
		$dataSql .= " ) ";
	
		//merge together
		$insertSqlReturn = $insertSql . ' VALUES ' .  $dataSql;
		
		$insertSql = '';
		$dataSql = '';
		
	return $insertSqlReturn;	
	}

    /*
    *   version 1.0
    *   @params, POST , GET , 
    *
    *
    */
    private function getCheckedTableName( $post = null , $get = null , $tableName = null )
    {
        if((isset($post) && isset($get['tbl']) ) && ($get['tbl'] == 1))
        {
            if( in_array($post['tableval'] , $tableName) )
            {                
                echo $stmt1. " ; ";                           
            }
        }                    
    }
	
	/*
    *   version 1.0
    *   @params, POST , GET , 
    *	Set Form with special details of table, columns , data types
    *
    */
    protected function exportDB($results = null , &$schObj = null)
	{  
	  
	  //get alter modify and add query list
	  $getAlterQueryArray = $schObj->getalterQueryForLive();

	  //get all types for add and modify
	  $getAllTypes = $schObj->getTypeSchLive();
	  
		//check before going anywhere , we should have atleast few data
	    if( (!empty( $results ) || !empty($getAlterQueryArray)) ) :
	  
			//set table missing list  
			if( !empty( $results ) ) : 
		   
				echo "<br><strong>Missing Tables and data import</strong><br>";
				echo "<form id='export' method='post' action='exportDB.php' >";
				
				$dataTableListArray = $schObj->getTableDataList();
				
				foreach ($results as $key => $value)
				{
					 
					 if( isset($value['db']) )
					 {
						
						//set table name with checkbox
						echo "<input type='checkbox' checked='' name='tableval[]' value='$key'> $key <br>";
						
						//set table name with data , if data is exists then will prompt the checkbox without checked
						if( isset( $dataTableListArray[$key] ) )
						{
							$encrypt = base64_encode($dataTableListArray[$key]);
							echo "<input type='checkbox' name='tableDataVal[]' value='$encrypt'> $dataTableListArray[$key] ( Data Import ) <br>";
						}
					
						echo "<hr>";
						
					 }
					 				 
				} 
		   endif;

	   //set alter add and modify query list for approval
	   if( !empty($getAlterQueryArray) ) :
	   
			echo "<br><strong>Alter ( ADD / MODIFY ) Columns</strong><br>";   
			echo "<form method='post' action='exportDB.php' >";
			$k = 0;foreach ($getAlterQueryArray as $key => $value)
			{
				 $hiddenAlter = $getAllTypes[$k];
				 
				 $str = base64_encode($value.'##'.$hiddenAlter);
				 echo "<input type='checkbox' checked='' name='alterVal[]' value='".$str."'> $value <br>";     
				  $k++;
			} 
	   endif;
	   
	   echo "<input type='submit' name='submit' value='submit' id='getTableNames' >";
	   echo "<input type='hidden' name='name_setter' value='".$schObj->getDbLive()."' >";
	   echo "</form>";
	   echo '<p><a href="?">&laquo; Back to main page</a></p>';
	  else :
	   $this->noError();
	  endif; 
	}

    /*
     * Version 1.0
     * @params, Get schema of beta and live to calculate / manipulate the field data type.
     * Set Alter and drop query
     */
    public function callFieldMatcher( $schema1 = null , $schema2 = null , &$schObj = null )
    {
        foreach ($schema1['tables'] as $name => $details)
        {

			if( isset($schema2['tables'][$name]) )
			{
				
				foreach ($details as $index => $fieldDetail)
				{  

					if( isset( $schema2['tables'][$name][$index]['Field'] ) )
					{
						//schema Live (2)
						$fieldSchemaLive = $schema2['tables'][$name][$index]['Field'];
						$typeSchemaLive = $schema2['tables'][$name][$index]['Type'];
						$nullSchemaLive = $schema2['tables'][$name][$index]['Null'];
						$keySchemaLive = $schema2['tables'][$name][$index]['Key'];
						$defaultSchemaLive = $schema2['tables'][$name][$index]['Default'];
						$extraSchemaLive = $schema2['tables'][$name][$index]['Extra'];

						//schema  Beta (1)
						$fieldSchemaBeta = $schema1['tables'][$name][$index]['Field'];
						$typeSchemaBeta = $schema1['tables'][$name][$index]['Type'];
						$nullSchemaBeta = $schema1['tables'][$name][$index]['Null'];
						$keySchemaBeta = $schema1['tables'][$name][$index]['Key'];
						$defaultSchemaBeta = $schema1['tables'][$name][$index]['Default'];
						$extraSchemaBeta = $schema1['tables'][$name][$index]['Extra'];

						//check type
						// $name => tabeleName
						// $schema2['name'] => applying database
						$this->checkType( $typeSchemaBeta , $typeSchemaLive , $fieldDetail , $name , $schema2['name'] , $schObj );				
					}
				}
			}		
		}
    }

    /*
     * Version 1.0
     * @params, need 2 params schema beta and live
     * return Alter query and Drop query accordingly
     *
     */
    public function checkType( $typeSchemaBeta = null , $typeSchemaLive = null , $fieldDetail = null , $tableName = null , $targetDatabase = null , &$schObj = null )
    {
        //global arry for alter and rop statement
        $globalAlterStatement = array();

        if( $typeSchemaBeta != $typeSchemaLive )
        {
			
            //Alter create sql statement
            $fieldDetail['table_name'] = $tableName;
            $fieldDetail['database_name'] = $targetDatabase;
            $setTypes = new stdClass();
            $setTypes->dataSetter = (object) $fieldDetail;
            $setTypes->type = 'field';

            $objClass = new DbDiff();

            /*
             *
             *  -- Table name
             *  data type
             *
             *
             */
            $returnDetail = $objClass->getCreateFullSqlStatement( $setTypes , $objClass , $schObj , 'MODIFY' );			
			if( !empty($returnDetail) ) :
				$objClass->setAlterStmt( $returnDetail , $tableName , $typeSchemaLive , 'MODIFY' );
				
				//set alter modify
				$schObj->setalterQueryForLive( $returnDetail , $schObj , $typeSchemaLive );
				
			endif;
			
			
			$returnDetail = '';
			
            unset($setTypes);
            unset($objClass);
        }

    }
	
	/*
     * Version 1.0
     * @params, need 2 params schema beta and live
     * return Alter query and Drop query accordingly
     *
     */
	public function setAlterStmt( $returnDetail = null , $tableName = null , $typeSchemaLive = null , $columnStatus = null )
	{	
		
		if( $columnStatus == "ADD" )		
		{
			$this->putContent("modify/addColumn.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/addColumn.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/addColumn.inc", "-- {$columnStatus}  COLUMN  FOR  THIS` {$tableName}` BEFORE COLUMN DATATYPE ({$typeSchemaLive})"  .PHP_EOL , FILE_APPEND);
			$this->putContent("modify/addColumn.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/addColumn.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/addColumn.inc", "    {$returnDetail};" . PHP_EOL , FILE_APPEND);
			$this->putContent("modify/addColumn.inc", ""  . PHP_EOL, FILE_APPEND);	
		}
		else
		{
			$this->putContent("modify/modify.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/modify.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/modify.inc", "-- {$columnStatus}  COLUMN  FOR  THIS` {$tableName}` BEFORE COLUMN DATATYPE ({$typeSchemaLive})"  .PHP_EOL , FILE_APPEND);
			$this->putContent("modify/modify.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/modify.inc", "-- "  . PHP_EOL, FILE_APPEND);
			$this->putContent("modify/modify.inc", "    {$returnDetail};" . PHP_EOL , FILE_APPEND);
			$this->putContent("modify/modify.inc", ""  . PHP_EOL, FILE_APPEND);	
		}
		
	}
	
	/*
     * Version 1.0
     * @params, need 2 params schema beta and live
     * return create and alter statement
     *
     */
	public function getCreateFullSqlStatement( $setTypes = null , $objClass = null , &$obj = null, $dataStatus = null)
	{
		
		if( $setTypes->type == 'table' )
		{
			
			//get table structure
			$this->sqlStatement = $objClass->createTableStmt( $setTypes , $obj );
			
			//get table data
			$objClass->createTableData( $setTypes , $obj );
			
		}
		else if( $setTypes->type == 'field' )
		{
			
			$this->sqlStatement = $objClass->createAlterStmt( $setTypes ,$dataStatus );			
		}
		
	return $this->sqlStatement;

	}
	
	/*
     * Version 1.0
     * @params, need 2 params schema beta and live
     * return table structure
     *
     */
	public function createTableStmt( $setTypes = null , &$obj =  null )
	{
	
		//get db details from class instance
		$getDetailsOfDb1 = $obj->getdbdetails();		
		$host = $getDetailsOfDb1['config']['host'];
		$user = $getDetailsOfDb1['config']['user'];
		$pass = $getDetailsOfDb1['config']['password'];
		
		
		$constraints='';
		$getDBName = explode( '<>' , $setTypes->dataSetter );		
		
		$setTypes->dataSetter = $getDBName[0];
		
		//set DB
		$newDb = explode( '##', $getDBName[1] );
		$setTypes->db = $newDb[0];
		
		//exist database in which table exists
		$setTypes->db_exists = $newDb[1];
		
		$db1 = new mysqli ($host,$user,$pass) or die($db1->error);
		mysqli_select_db($db1,"{$setTypes->db_exists}") or die($db1->error);
		
		$result2  = mysqli_query( $db1 , "SHOW CREATE TABLE {$setTypes->db_exists}.{$setTypes->dataSetter}" . ";" )
		or die($db1->error);
		
		$res = mysqli_fetch_array($result2)[1];
		
    return $res;
	}
	
	/*
     * Version 1.0
     * @params, need 2 params schema beta and live
     * return table data for importing
     *
     */
	public function createTableData( $setTypes = null , &$obj =  null )
	{
	
		//get db details from class instance
		$liveDB_Name = $obj->getSchemaLive()['name'];
		$getDetailsOfDb1 = $obj->getdbdetails();	

		$host = $getDetailsOfDb1['config']['host'];
		$user = $getDetailsOfDb1['config']['user'];
		$pass = $getDetailsOfDb1['config']['password'];
		$setTypes->db_exists = 	$getDetailsOfDb1['config']['name'];
		
		//DB connector		
		$db1 = new mysqli ($host,$user,$pass) or die($db1->error);
		mysqli_select_db($db1,"{$setTypes->db_exists}") or die($db1->error);
		
		$result2  = mysqli_query( $db1 , "SELECT * FROM {$setTypes->db_exists}.{$setTypes->dataSetter}" )
		or die($db1->error);
		
		//check num rows
		if( mysqli_num_rows($result2) > 0 )
		{
			
			//table name
			$tableName = $setTypes->dataSetter;
			
			//flush first
			$this->putContent( "inc/".$tableName."_import.inc", "");
			$this->putContent( "inc/".$tableName."_import.inc", "-- "  . PHP_EOL ,FILE_APPEND);
			$this->putContent( "inc/".$tableName."_import.inc", "-- "  . PHP_EOL ,FILE_APPEND);
			$this->putContent( "inc/".$tableName."_import.inc", "-- "  . PHP_EOL ,FILE_APPEND);
			$this->putContent( "inc/".$tableName."_import.inc", "-- ------TABLE DATA FOR IMPORT `{$liveDB_Name}`.`{$tableName}`"  . PHP_EOL ,FILE_APPEND);   		
			$this->putContent( "inc/".$tableName."_import.inc", "-- "  . PHP_EOL ,FILE_APPEND);
			$this->putContent( "inc/".$tableName."_import.inc", "-- "  . PHP_EOL ,FILE_APPEND);
			$this->putContent( "inc/".$tableName."_import.inc", "-- "  . PHP_EOL ,FILE_APPEND);
			
			while( $tupple = mysqli_fetch_assoc($result2) )
			{			
				//get keys
				$getKeys = array_keys( (array)$tupple );
				
				//set into object
				$tupple = (object)$tupple;
									
				$stmt = $obj->createTableDataImportFile( $liveDB_Name , $setTypes->dataSetter , $tupple , $getKeys );	
				$this->putContent( "inc/".$tableName."_import.inc", "{$stmt};"  . PHP_EOL ,FILE_APPEND);						
				$this->putContent( "inc/".$tableName."_import.inc", " "  . PHP_EOL ,FILE_APPEND);						
				
			}
			
			//set tableDataList globally
			$in = $obj->getTableInc();
			$obj->setTableDataList($tableName , $in);
			
			//set table inc again
			$obj->setTableInc( $in );
			
		}
	}
		
    public function createAlterStmt( $setTypes = null , $dataStatus = null )
    {
		
        $alter = "ALTER TABLE ";
        $alter .= "`".$setTypes->dataSetter->database_name."`" . '.' . "`".$setTypes->dataSetter->table_name."`";
        $alter .= "\r\n";
        //add key
        if( $setTypes->dataSetter->Key == 'PRI' )
        {
            if( $setTypes->dataSetter->Extra != '' )
            {

            }
            else
            {
                $alter .= " ";
                $alter .= " ADD PRIMARY INDEX ( {$setTypes->dataSetter->Field} ) , ";
            }

        }
        
        if( $setTypes->dataSetter->Key == 'UNI' )
        {
            $alter .= " ";            
        }
        
        if( $setTypes->dataSetter->Key == 'MUL' )
        {
            $alter .= " ";
            $alter .= " ADD INDEX ( {$setTypes->dataSetter->Field} ) , ";
        }
        
        $alter .= ($dataStatus == 'MODIFY' ? '  MODIFY ' : '  ADD ');

        $alter .= " COLUMN ";
        $alter .= "`".$setTypes->dataSetter->Field."`";
        $alter .= " ";
        $alter .= $setTypes->dataSetter->Type;

        //add AUTO_INCREAMENT
        if( $setTypes->dataSetter->Extra != '' )
        {
            if( $setTypes->dataSetter->Key == 'PRI' )
            {
                $alter .= " PRIMARY KEY ";
            }

            if( $setTypes->dataSetter->Key == 'UNI' )
            {
                $alter .= " UNIQUE KEY ";
            }

            $alter .= " ";
            $alter .= " " . $setTypes->dataSetter->Extra . " ";
        }

        //add Default valie if setTypes
        if( $setTypes->dataSetter->Default != '' )
        {
            if( is_numeric( $setTypes->dataSetter->Default ) )
			{
				$alter .= " ";
				$alter .= " DEFAULT {$setTypes->dataSetter->Default} ";
			}
			else
			{
				$alter .= " ";
				$alter .= " DEFAULT '{$setTypes->dataSetter->Default}' ";
			}
        }

        //Null or NotNull
        $nullV = 'Null';
        if( $setTypes->dataSetter->$nullV == 'NO' )
        {
            $alter .= " NOT NULL ";
        }
        else
        {
            $alter .= " NULL ";
        }

     return $alter;
    }


    public function setSchema( $schema1 = null , $schema2 = null )
    {
        $this->beta = $schema1;
        $this->live = $schema2;
    }

    public function getSchemaBeta()
    {
        return $this->beta;
    }

    public function getSchemaLive()
    {
        return $this->live;                
    }
	
	public function setLiveDb( $dbLive = null )
    {
        $this->dbLive = $dbLive;
    }

    public function getDbLive()
    {
        return $this->dbLive;                
    }
	
	public function setalterQueryForLive( $alterQueryForLive = null , &$schObj = null , $typeSchemaLive = null )
    {
		
		//get current index
		$in = $schObj->getInc();
		
		//set alter query for approval
		$schObj->alterQueryForLive[$in] = $alterQueryForLive;
		
		//set alter query for approval
		$schObj->typeSchLive[$in] = $typeSchemaLive;
		
		//set next index
		$schObj->setInc( $in );
		$schObj->getInc();
		
    }

    public function getalterQueryForLive()
    {
        return $this->alterQueryForLive;                
    }
	
	public function getTypeSchLive()
    {
        return $this->typeSchLive;                
    }
	
	public function setInc( $inc = null )
    {
		$inc++;
		$this->inc = $inc;		
	}		

    public function getInc()
    {
        return $this->inc;                
    }

    /*
    *
    *   Version 1.0
    *   @params, $filename   
    *
    */
    function download($filename = null)
    {

       // $filename = 'database.sql';
        if(!empty($filename))
        {


            // Specify file path.
            $path = 'inc/'; // '/uplods/'
            $download_file =  $path.$filename;
            // Check file is exists on given path.
            if(file_exists($download_file))
            {
                  // Getting file extension.
                  $extension = explode('.',$filename);
                  $extension = $extension[count($extension)-1]; 
                  // For Gecko browsers
                  header('Content-Transfer-Encoding: binary');  
                  header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($path)) . ' GMT');
                  // Supports for download resume
                  header('Accept-Ranges: bytes');  
                  // Calculate File size
                  header('Content-Length: ' . filesize($download_file));  
                  header('Content-Encoding: none');
                  // Change the mime type if the file is not PDF
                  header('Content-Type: application/'.$extension);  
                  // Make the browser display the Save As dialog
                  header('Content-Disposition: attachment; filename=' . $filename);  
                  readfile($download_file); 
				  
				 return 'success'; 
                 // exit;
            }
            else
            {
              echo 'File does not exists on given path';
            }         
        }
    }
	
	/*
    *
    *   Version 1.0
    *   @params, $filename   
    *
    */
    function createAlterSheetForExport( $query = null , $type = null )
	{
		
		/*-- 
		-- 
		-- ADD  COLUMN  FOR  THIS` admin` BEFORE COLUMN DATATYPE (NEW FIELD)
		-- 
		--*/
		
		if( strstr( $query , "ADD" ) )
		{
			$text = " -- ADD NEW COLUMN ";
		}
		else
		{
			$text = " -- MODIFY EXISTS COLUMN AND OLD DATATYPE WAS ( {$type} )";	
		}
		
		//add default comments
		$this->putContent( "modify/alter.inc", "--" . PHP_EOL ,FILE_APPEND);	
		$this->putContent( "modify/alter.inc", "--"  . PHP_EOL ,FILE_APPEND);			
		$this->putContent( "modify/alter.inc", $text  . PHP_EOL ,FILE_APPEND);
		$this->putContent( "modify/alter.inc", "--"  . PHP_EOL ,FILE_APPEND);			
		$this->putContent( "modify/alter.inc", "--"  . PHP_EOL ,FILE_APPEND);			
		$this->putContent( "modify/alter.inc", $query . ";"  . PHP_EOL ,FILE_APPEND);	
		$this->putContent( "modify/alter.inc", "--"  . PHP_EOL ,FILE_APPEND);	
		$this->putContent( "modify/alter.inc", "--"  . PHP_EOL ,FILE_APPEND);	
		
		$text = '';
		
	}
	
	/*
		Call inner action
	*/
	public function noError()
	{
		echo __CONGRATS__;
		echo "<br>";
		echo __MAIN_PAGE__;
	}
	
	/*
		Cusotm function and organized	
	*/
	private function putContent( $path = null , $data = null , $option = null )
	{
		file_put_contents( $path , $data  , $option );	
	}
	
	/*
	
		CALL PUBLIC FOR ACCESSING PRIVATE
	
	*/
	public function putContentPublically( $path = null , $data = null , $option = null  )
	{
		$this->putContent( $path , $data , $option );
	}
	
	// set db details for inner usage config 1
	public function setdbdetails( $getdb = null )
    {
        $this->getdb = $getdb;
    }
  
	// get db details for inner usage config1
	public function getdbdetails()
    {
        return $this->getdb;                
    }
	
	// set table data name list
	public function setTableDataList( $tableDataList = null, $in = null )
	{
        $this->tableDataList[$tableDataList] = $tableDataList;
    }
  
	// get table data name list
	public function getTableDataList()
    {
        return $this->tableDataList;                
    }
	
	public function setTableInc( $tableInc = null )
    {
		$tableInc++;
		$this->tableInc = $tableInc;		
	}		

    public function getTableInc()
    {
        return $this->tableInc;                
    }
	
		 
}


/*
Notes: before you run any statements put this in the first line if found Invalid default value
SET sql_mode = '';


*/